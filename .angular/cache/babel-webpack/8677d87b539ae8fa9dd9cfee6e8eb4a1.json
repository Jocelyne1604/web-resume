{"ast":null,"code":"import { EventEmitter, LOCALE_ID } from \"@angular/core\";\nimport { SafariDateFormatterPipe } from \"../../core/pipe/safari-date-formatter.pipe\";\nimport { LocalizedDatePipe } from \"../../core/pipe/localized-date.pipe\";\nimport * as i0 from \"@angular/core\";\nconst _c0 = [\"line\"];\nexport let ExperienceTimelineComponent = /*#__PURE__*/(() => {\n  class ExperienceTimelineComponent {\n    constructor(elRef, renderer, locale) {\n      this.elRef = elRef;\n      this.renderer = renderer;\n      this.locale = locale;\n      this._experiences = [];\n      this.onTimelineChanged = new EventEmitter();\n    }\n\n    get currentPosition() {\n      return this._currentPosition;\n    }\n\n    set currentPosition(value) {\n      if (value) {\n        this._currentPosition = value;\n        this.updateTimelineNavigation();\n      }\n    }\n\n    get experiences() {\n      return this._experiences;\n    }\n\n    set experiences(value) {\n      if (value) {\n        this._experiences = value;\n        this.populateExperienceTimeline();\n      }\n    }\n\n    ngOnInit() {\n      this.offsetWidth = this.elRef.nativeElement.offsetWidth;\n      this.removeEventListener = this.renderer.listen(this.elRef.nativeElement, \"click\", event => {\n        if (event.target && event.target.getAttribute(\"id-position\")) {\n          const targetId = event.target.getAttribute(\"id-position\");\n          this.onTimelineChanged.emit(targetId);\n        }\n      });\n    } // Cleanup by removing the event listener on destroy\n\n\n    ngOnDestroy() {\n      this.removeEventListener();\n    }\n\n    updateTimelineNavigation() {\n      const activePreviousElem = this.line.nativeElement.querySelector(\".milestone.active.current\");\n      this.renderer.removeClass(activePreviousElem, \"current\");\n      const targetElem = this.line.nativeElement.querySelector(`div[id-position=\"${this.currentPosition}\"]`);\n      this.renderer.addClass(targetElem, \"current\");\n    }\n\n    daysBetween(startDate, endDate) {\n      // The .replace() is necessary in order to avoid issues in the Firefox browser.\n      const pointA = new Date(startDate.replace(/-/g, '/'));\n      const pointB = new Date(endDate.replace(/-/g, '/'));\n      return Math.round(Math.abs(+pointA - +pointB) / 8.64e7);\n    }\n\n    retrieveTodayDateAsString() {\n      const today = new Date();\n      return `${today.getMonth() + 1}-${today.getDate()}-${today.getFullYear()}`;\n    }\n\n    populateExperienceTimeline() {\n      let dates = this._experiences.map(experience => experience.startAt); // Adding the current day in order to complete the timeline.\n\n\n      dates.push(this.retrieveTodayDateAsString());\n\n      if (dates && dates.length < 2) {\n        this.renderer.setStyle(this.elRef.nativeElement, \"visibility\", \"hidden\");\n      } else if (dates.length >= 2) {\n        const daysBetween = this.daysBetween(dates[0], dates[dates.length - 1]);\n        const oneDayInPixels = this.offsetWidth / daysBetween; // Draw first date milestone      \n\n        this.renderer.appendChild(this.line.nativeElement, this.createMilestone(1, 0, dates[0]));\n        let i;\n        const lastFrameLoop = dates.length - 1; // Draw the middle date milestones\n\n        for (i = 1; i < lastFrameLoop; i++) {\n          const periodInDays = this.daysBetween(dates[0], dates[i]);\n          const periodWidth = periodInDays * oneDayInPixels;\n          const milestoneElement = this.createMilestone(i + 1, periodWidth, dates[i]);\n\n          if (i == lastFrameLoop - 1) {\n            this.renderer.addClass(milestoneElement, \"current\");\n          }\n\n          this.renderer.appendChild(this.line.nativeElement, milestoneElement);\n        } // Draw last date milestone ( the current frame )\n\n\n        const lastDataMilestone = this.createCurrentTriangle(i + 1);\n        this.renderer.appendChild(this.line.nativeElement, lastDataMilestone);\n      }\n    }\n\n    calculatePosition(leftPosition, offsetWidth) {\n      return leftPosition * 100 / offsetWidth;\n    }\n\n    createMilestone(index, left, date) {\n      const milestoneElement = this.renderer.createElement(\"div\");\n      this.renderer.addClass(milestoneElement, \"milestone\");\n      this.renderer.addClass(milestoneElement, \"active\");\n      const leftPos = this.calculatePosition(left, this.offsetWidth); // Uses at most 95% instead of 100% in order to avoid collision to the arrow icon on the right side of the timeline.\n\n      this.renderer.setStyle(milestoneElement, \"left\", `${Math.min(95, leftPos)}%`);\n      this.renderer.setAttribute(milestoneElement, \"id-position\", index.toString());\n      const labelElement = this.createLabelElement(date.toString());\n      this.renderer.appendChild(milestoneElement, labelElement);\n      return milestoneElement;\n    }\n\n    createCurrentTriangle(index) {\n      const milestoneElement = this.renderer.createElement(\"div\");\n      this.renderer.addClass(milestoneElement, \"milestone\");\n      this.renderer.addClass(milestoneElement, \"active\");\n      this.renderer.addClass(milestoneElement, \"future\");\n      this.renderer.setStyle(milestoneElement, \"left\", \"100%\");\n      return milestoneElement;\n    } // Update this function based on the desired date label formatting.\n\n\n    createLabelElement(date) {\n      const safariDateFormatterPipe = new SafariDateFormatterPipe();\n      const safariDateFormatterPipeValue = safariDateFormatterPipe.transform(date);\n      const localizedDatePipe = new LocalizedDatePipe(this.locale);\n      let month = localizedDatePipe.transform(safariDateFormatterPipeValue, \"MMM\");\n      const labelElement = this.renderer.createElement(\"div\");\n      this.renderer.addClass(labelElement, \"popupSpan\");\n      const monthSpan = this.renderer.createElement(\"span\");\n      this.renderer.addClass(monthSpan, \"month\");\n      this.renderer.appendChild(monthSpan, this.renderer.createText(month));\n      const year = localizedDatePipe.transform(safariDateFormatterPipeValue, \"yyyy\");\n      const yearSpan = this.renderer.createElement(\"span\");\n      this.renderer.addClass(yearSpan, \"year\");\n      this.renderer.appendChild(yearSpan, this.renderer.createText(year));\n      this.renderer.appendChild(labelElement, monthSpan);\n      this.renderer.appendChild(labelElement, yearSpan);\n      return labelElement; // year, E.g: May. 2020\n    }\n\n  }\n\n  ExperienceTimelineComponent.ɵfac = function ExperienceTimelineComponent_Factory(t) {\n    return new (t || ExperienceTimelineComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(LOCALE_ID));\n  };\n\n  ExperienceTimelineComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ExperienceTimelineComponent,\n    selectors: [[\"app-experience-timeline\"]],\n    viewQuery: function ExperienceTimelineComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.line = _t.first);\n      }\n    },\n    inputs: {\n      currentPosition: \"currentPosition\",\n      experiences: \"experiences\"\n    },\n    outputs: {\n      onTimelineChanged: \"onTimelineChanged\"\n    },\n    decls: 5,\n    vars: 0,\n    consts: [[1, \"bottom-container\"], [1, \"lineCont\"], [1, \"line\"], [\"line\", \"\"], [1, \"mainCont\"]],\n    template: function ExperienceTimelineComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelement(2, \"div\", 2, 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(4, \"div\", 4);\n        i0.ɵɵelementEnd();\n      }\n    },\n    styles: [\".bottom-container[_ngcontent-%COMP%]{position:relative;bottom:-75px}.mainCont[_ngcontent-%COMP%]{height:80%;width:100%;position:relative;color:#fff;font-size:62px;text-align:center;transition:all .2s ease-out}.lineCont[_ngcontent-%COMP%]{width:100%;height:20%}.lineCont[_ngcontent-%COMP%]   .line[_ngcontent-%COMP%]{height:3px;width:100%;background:rgba(255,255,255,.25);border-radius:5px;margin:auto;top:50%;-ms-transform:translateY(-50%);transform:translateY(-50%);position:relative}.milestone[_ngcontent-%COMP%]{width:10px;height:10px;background:#fff;border-radius:15px;position:absolute;top:-6px;border:3px solid white;cursor:pointer;transition:text-shadow .3s linear}.milestone[_ngcontent-%COMP%]   .popupSpan[_ngcontent-%COMP%]{width:auto;height:auto;padding:10px;white-space:nowrap;color:#fff;position:absolute;top:20px;left:-35px;transition:all .1s ease-out;pointer-events:none}.milestone[_ngcontent-%COMP%]   .popupSpan[_ngcontent-%COMP%]   .month[_ngcontent-%COMP%]{margin-right:5px;text-transform:capitalize}.milestone.current[_ngcontent-%COMP%]{width:15px;height:15px;background:#414c73;top:-8px;font-size:22px;text-shadow:0 0 15px white}.milestone.active[_ngcontent-%COMP%]   .popupSpan[_ngcontent-%COMP%]{top:-40px;display:block}.milestone.active.future[_ngcontent-%COMP%]{width:1px;height:1px;border-top:7px solid transparent;border-bottom:8px solid transparent;border-left:13px solid white;background:transparent;border-radius:0;border-right:0;pointer-events:none}.milestone.active.current[_ngcontent-%COMP%]   .popupSpan[_ngcontent-%COMP%]{left:-50px;top:-50px}@-webkit-keyframes grow{0%{-ms-transform:scale(.98);transform:scale(.98)}50%{-ms-transform:scale(.99);transform:scale(.99)}to{-ms-transform:scale(.98);transform:scale(.98)}}@keyframes grow{0%{-ms-transform:scale(.98);transform:scale(.98)}50%{-ms-transform:scale(.99);transform:scale(.99)}to{-ms-transform:scale(.98);transform:scale(.98)}}\", \"@media screen and (max-width: 1024px){.bottom-container[_ngcontent-%COMP%]{bottom:-90px}.milestone[_ngcontent-%COMP%]{width:8px;height:8px;top:-6px}.milestone[_ngcontent-%COMP%]   .popupSpan[_ngcontent-%COMP%]{left:-40px;font-size:15px}.milestone.current[_ngcontent-%COMP%]{width:12px;height:12px;top:-8px}.milestone.current[_ngcontent-%COMP%]   .popupSpan[_ngcontent-%COMP%]{font-size:18px}.milestone.active.current[_ngcontent-%COMP%]   .popupSpan[_ngcontent-%COMP%]{top:-45px;left:-40px}}@media screen and (max-width: 880px){.bottom-container[_ngcontent-%COMP%]{bottom:-60px}.milestone[_ngcontent-%COMP%]   .popupSpan[_ngcontent-%COMP%]{left:-20px}.milestone[_ngcontent-%COMP%]   .popupSpan[_ngcontent-%COMP%]   .month[_ngcontent-%COMP%]{display:none}.milestone.active.current[_ngcontent-%COMP%]   .popupSpan[_ngcontent-%COMP%]{left:-25px}}@media screen and (max-width: 600px){.bottom-container[_ngcontent-%COMP%]{display:none}}\"]\n  });\n  return ExperienceTimelineComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}