{"ast":null,"code":"export class Typed {\n  constructor(element, options, phrases) {\n    const defaults = {\n      typeSpeed: 250,\n      startDelay: 2000,\n      phrasePeriod: 200\n    };\n    this.text = \"\";\n    this.isDeleting = false;\n    this.loopNum = 0;\n    this.element = element;\n    this.options = Object.assign(Object.assign({}, defaults), options);\n    this.phrases = phrases;\n    this.appendAnimationCss();\n  }\n\n  begin() {\n    this.timeout = setTimeout(() => {\n      this.typewrite();\n    }, this.options.startDelay);\n  }\n\n  insertSpan(text) {\n    this.element.innerHTML = `<span class=\"wrap\">${text}</span>`;\n  }\n\n  typewrite() {\n    let i = this.loopNum % this.phrases.length;\n    let fullTxt = this.phrases[i];\n\n    if (this.isDeleting) {\n      this.text = fullTxt.substring(0, this.text.length - 1);\n    } else {\n      this.text = fullTxt.substring(0, this.text.length + 1);\n    }\n\n    this.insertSpan(this.text);\n    let that = this;\n    let delta = this.options.typeSpeed - Math.random() * 100;\n\n    if (this.isDeleting) {\n      delta /= 2;\n    }\n\n    if (!this.isDeleting && this.text === fullTxt) {\n      delta = this.options.phrasePeriod;\n      this.isDeleting = true;\n    } else if (this.isDeleting && this.text === \"\") {\n      this.isDeleting = false;\n      this.loopNum++;\n      delta = 500;\n    }\n\n    setTimeout(function () {\n      that.typewrite();\n    }, delta);\n  }\n\n  appendAnimationCss() {\n    let css = document.createElement(\"style\");\n    css.type = \"text/css\";\n    css.id = \"typing\";\n    const innerCss = `\n            .txt-rotate > .wrap::after {\n                content: \"|\";\n                opacity: 1;\n                animation: typedBlink 0.7s infinite;\n                -webkit-animation: typedBlink 0.7s infinite;\n                animation: typedBlink 0.7s infinite;\n            }\n            @keyframes typedBlink{\n                50% { opacity: 0.0; }\n            }\n            @-webkit-keyframes typedBlink{\n                0% { opacity: 1; }\n                50% { opacity: 0.0; }\n                100% { opacity: 1; }\n            }\n        `;\n    css.innerHTML = innerCss;\n    document.head.appendChild(css);\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}